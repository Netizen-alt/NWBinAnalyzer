#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ç‡∏≠‡∏á NWBinAnalyzer
"""

import sys
import os

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô path ‡πÄ‡∏û‡∏∑‡πà‡∏≠ import app.py
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from app import (
        read_varint, 
        extract_strings_from_binary,
        analyze_binary_structure,
        categorize_strings,
        find_string_relationships,
        analyze_functionality
    )
    print("‚úÖ Import ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å app.py ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
except ImportError as e:
    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ import ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ: {e}")
    sys.exit(1)

def test_read_varint():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô read_varint"""
    print("\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö read_varint...")
    
    test_cases = [
        (b'\x05', 5),
        (b'\x80\x01', 128),
        (b'\xff\x01', 255),
        (b'\x80\x80\x01', 16384),
    ]
    
    for data, expected in test_cases:
        try:
            result, offset = read_varint(data, 0)
            if result == expected:
                print(f"  ‚úÖ {data.hex()} ‚Üí {result}")
            else:
                print(f"  ‚ùå {data.hex()} ‚Üí {result} (‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á {expected})")
        except Exception as e:
            print(f"  ‚ùå {data.hex()} ‚Üí Error: {e}")

def test_extract_strings():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô extract_strings_from_binary"""
    print("\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö extract_strings_from_binary...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• binary ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    test_data = b'hello\x00world\x00\x05test!\x03abc\xff\xfeinvalid'
    
    try:
        strings = extract_strings_from_binary(test_data)
        print(f"  ‚úÖ ‡∏û‡∏ö strings: {strings}")
        
        expected_strings = ['hello', 'world', 'test!', 'abc']
        found_expected = [s for s in expected_strings if s in strings]
        print(f"  üìä ‡∏û‡∏ö strings ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á: {found_expected}")
        
    except Exception as e:
        print(f"  ‚ùå Error: {e}")

def test_categorize_strings():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô categorize_strings"""
    print("\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö categorize_strings...")
    
    test_strings = [
        'createHash',
        'readFileSync', 
        'https://example.com',
        './config.json',
        'RSA-SHA256',
        'require',
        'Invalid signature',
        'sussy',
        'abc',
        'logDir'
    ]
    
    try:
        categories = categorize_strings(test_strings)
        
        print("  üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:")
        for category, items in categories.items():
            if items:
                print(f"    {category}: {items}")
                
    except Exception as e:
        print(f"  ‚ùå Error: {e}")

def test_analyze_functionality():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô analyze_functionality"""
    print("\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö analyze_functionality...")
    
    test_strings = [
        'fetch', 'https://api.com', 'request',
        'createHash', 'verifySignature', 'crypto',
        'readFile', 'writeFile', 'fs',
        'worker', 'thread',
        'download', 'upload',
        'sussy', 'verification failed'
    ]
    
    try:
        functionality = analyze_functionality(test_strings)
        print("  üéØ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö:")
        for func in functionality:
            print(f"    {func}")
            
    except Exception as e:
        print(f"  ‚ùå Error: {e}")

def test_find_relationships():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô find_string_relationships"""
    print("\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö find_string_relationships...")
    
    test_strings = [
        'readFile',
        'readFileSync',
        'writeFile', 
        'createHash',
        'createCipher',
        'test',
        'testing',
        'config.json',
        'config'
    ]
    
    try:
        relationships = find_string_relationships(test_strings)
        print("  üîó ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏û‡∏ö:")
        for rel in relationships[:5]:  # ‡πÅ‡∏™‡∏î‡∏á 5 ‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å
            print(f"    {rel}")
            
    except Exception as e:
        print(f"  ‚ùå Error: {e}")

def test_with_sample_file():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á"""
    print("\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô
    if not os.path.exists('test_simple.bin'):
        print("  üìÅ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå test_simple.bin, ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...")
        try:
            from create_sample import create_simple_bin
            create_simple_bin()
        except:
            print("  ‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ")
            return
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå
    try:
        with open('test_simple.bin', 'rb') as f:
            data = f.read()
        
        print(f"  ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå test_simple.bin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ({len(data)} bytes)")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö magic header
        if data[:4] == b'\x8e\x06\xde\xc0':
            print("  ‚úÖ Magic header ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        else:
            print("  ‚ùå Magic header ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            
    except Exception as e:
        print(f"  ‚ùå Error: {e}")

def main():
    """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    print("üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö NWBinAnalyzer Functions")
    print("=" * 50)
    
    test_read_varint()
    test_extract_strings()
    test_categorize_strings()
    test_analyze_functionality()
    test_find_relationships()
    test_with_sample_file()
    
    print("\n" + "=" * 50)
    print("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print("\nüí° ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:")
    print("   python ../app.py test_simple.bin")

if __name__ == '__main__':
    main()
