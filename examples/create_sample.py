#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå binary ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö NWBinAnalyzer
"""

import struct
import os

def write_varint(value):
    """‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤ variable-length integer"""
    result = b''
    while value >= 0x80:
        result += bytes([(value & 0x7F) | 0x80])
        value >>= 7
    result += bytes([value & 0x7F])
    return result

def create_simple_bin():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå binary ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å"""
    
    # Magic header ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö NW.js
    data = b'\x8e\x06\xde\xc0'
    
    # Constant pool entries
    strings = [
        "hello",
        "world", 
        "test",
        "createHash",
        "node:crypto"
    ]
    
    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô entries
    data += write_varint(len(strings))
    
    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ string
    for s in strings:
        string_bytes = s.encode('utf-8')
        data += write_varint(len(string_bytes))
        data += string_bytes
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
    with open('test_simple.bin', 'wb') as f:
        f.write(data)
    
    print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå test_simple.bin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ({len(data)} bytes)")

def create_complex_bin():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå binary ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô"""
    
    # Magic header
    data = b'\x8e\x06\xde\xc0'
    
    # Constant pool entries ‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
    entries = [
        # Plain strings
        "require",
        "module",
        "exports",
        
        # API calls
        "createHash",
        "readFileSync", 
        "writeFileSync",
        "verifySignature",
        
        # Crypto related
        "sha256",
        "RSA-SHA256",
        "aes-128-gcm",
        
        # File paths
        "./config.json",
        "/tmp/log.txt",
        "worker.js",
        
        # URLs
        "https://api.example.com",
        "http://localhost:3000",
        
        # Error messages
        "Invalid signature",
        "File not found",
        "Hash mismatch",
        
        # Binary data (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
        b'\x01\x02\x03\x04\x05',
        b'\xff\xfe\xfd\xfc',
        
        # Empty string
        "",
        
        # Unicode
        "‡∏ó‡∏î‡∏™‡∏≠‡∏ö",
        "üîêüåêüìÅ",
    ]
    
    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô entries
    data += write_varint(len(entries))
    
    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ entry
    for entry in entries:
        if isinstance(entry, str):
            entry_bytes = entry.encode('utf-8')
        else:
            entry_bytes = entry
            
        data += write_varint(len(entry_bytes))
        data += entry_bytes
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
    with open('sample.bin', 'wb') as f:
        f.write(data)
    
    print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå sample.bin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ({len(data)} bytes)")

def create_corrupted_bin():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå binary ‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î"""
    
    # Magic header ‡∏ú‡∏¥‡∏î
    data = b'\x8e\x06\xde\xc1'  # ‡πÑ‡∏ö‡∏ï‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ú‡∏¥‡∏î
    
    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢
    data += b'\x05'  # constant count = 5
    data += b'\x03ABC'  # string length=3, data="ABC"
    data += b'\xff\xff\xff\xff'  # length ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
    
    with open('corrupted.bin', 'wb') as f:
        f.write(data)
    
    print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå corrupted.bin ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ({len(data)} bytes)")

if __name__ == '__main__':
    print("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö NWBinAnalyzer...")
    print()
    
    create_simple_bin()
    create_complex_bin() 
    create_corrupted_bin()
    
    print()
    print("üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô:")
    for filename in ['test_simple.bin', 'sample.bin', 'corrupted.bin']:
        if os.path.exists(filename):
            size = os.path.getsize(filename)
            print(f"  - {filename} ({size} bytes)")
    
    print()
    print("üöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:")
    print("  python ../app.py test_simple.bin")
    print("  python ../app.py sample.bin")
    print("  python ../app.py corrupted.bin")
